<?xml version="1.0" encoding="UTF-8"?>
<module
    name="Global Logger"
    prefix="module-json-logger-global"
    category="CERTIFIED"
    doc:description="This module relies entirely in runtime provided components (no other Plugin dependencies)"
    xmlns="http://www.mulesoft.org/schema/mule/module"
    xmlns:mule="http://www.mulesoft.org/schema/mule/core"
    xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
        http://www.mulesoft.org/schema/mule/module http://www.mulesoft.org/schema/mule/module/current/mule-module.xsd">

    <property name="appName"       displayName="Application Name"            type="string" defaultValue="${app.name}" doc:description="Application name" />
    <property name="appVersion"    displayName="Application Version"         type="string"                            doc:description="Application version" />
    <property name="environment"   displayName="Environment"                 type="string" defaultValue="${mule.env}" doc:description="Execution environment name, typically loaded in a runtime property i.e: mule.env" />
    <property name="fieldsMasking" displayName="Content fields data masking" type="string"
        defaultValue="client_secret,Authorization,token,password,email,mobilePhone,phone,CPF,cpf__c"
        doc:description="Specify the fields to be masked, separated by commas." />


    <operation name="logWithMasking"
        doc:description="Logs sensitive data while masking or anonymizing certain information to ensure privacy and security.">

        <parameters>
            <parameter name="message"    use="REQUIRED"    type="string"                                                doc:description="Free text to describe context of logging this log or exception entry" />
            <parameter name="content"    use="OPTIONAL"    type="string" role="CONTENT"                                 doc:description="Can contain attributes/payloads for logs, or exception payload for errors" />
            <parameter name="tracePoint"                   type="tracePoint"            defaultValue="START" />
            <parameter name="level"                        type="priority"              defaultValue="INFO" />
            <parameter name="userId"     use="OPTIONAL"    type="string"                                                doc:description="The user of transaction" />
            <parameter name="category"   use="OPTIONAL"    type="string"                defaultValue="${api.category}"  doc:description="Specifies a category name that it adds to the log trace, before the output object. You might use a category to route your log messages, or you might set log levels based on category" />
            <parameter name="correlationId" tab="Advanced" type="string"                defaultValue="#[correlationId]" doc:description="Unique identifier value that is attached to messages that allows reference to a particular transaction or event chain" />
        </parameters>

        <body>
            <mule:try>
                <mule:set-variable variableName="logTrace"
                    value='#[%dw 2.0
        output application/json indent=true

        fun stringifyAny(inputData: Any, contentType: String) =
            if ((contentType contains "application/xml") or
                    (contentType contains "application/dw"))
              write(inputData, contentType, {indent: false})
            else if (contentType == "*/*" or (contentType contains "application/json"))
              inputData
            else
              write(inputData, contentType)

        fun maskString(value) =
            value
                    replace /[0-9]/ with "*"
                    replace /[A-Z]/ with "X"
                    replace /[a-z]/ with "x"
                    replace "@" with "*"

        fun maskNumber(value) =
            value replace /[0-9]/ with "*"

        var blacklistedKeys = splitBy(vars.fieldsMasking, ",")

        fun maskObject(obj: Object) =
            obj mapObject ((value, key, index) -> {
                    (key) : (maskData(key, value))
            })

        fun maskArray(obj: Array) =
            obj map ((item, index) ->
                    if (item is Object)
                            maskObject(item)
                    else item
            )

        fun maskData(key: String, value: Any) =
            if (blacklistedKeys contains key)
                    if (value is String)
                            maskString(value)
                    else if (value is Number)
                            maskNumber(value)
                    else if (value is Array)
                            value map ((item, index) ->
                                    if (item is Object)
                                            maskObject(item)
                                    else maskString(item)
                            )
                    else value
            else if (value is Object)
                    value mapObject ((value, key, index) -> {
                            (key) : (maskData(key, value))
                    })
            else if (value is Array)
                    if (blacklistedKeys contains key)
                            value map ((item, index) ->
                                    if (item is Object)
                                            maskObject(item)
                                    else maskString(item)
                            )
                    else maskArray(value)
            else value


        fun main(content: Any)=
            if (isEmpty(blacklistedKeys))
                    content
            else
                    if (content is Object)
                            maskObject(content)
                    else if (content is Array)
                            maskArray(content)
                    else content

        var contentType = vars.content.^mediaType default vars.content.^mimeType
        ---
        {
            correlationId     : vars.correlationId,
            flowName          : flow.name as String default "unknown",
            message           : vars.message,
            tracePoint        : vars.tracePoint,
            content           : if(vars.content != null) stringifyAny(main(vars.content), contentType) else "",
            applicationName   : vars.appName,
            applicationVersion: vars.appVersion,
            timestamp         : now(),
            environment       : vars.environment
        }]' />
                <mule:error-handler>
                    <mule:on-error-continue
                        doc:name="On Error Continue"
                        enableNotifications="true" logException="true"
                        type="ANY">
                        <mule:set-variable variableName="logTrace"
                            value='#[
                            output application/json skipNullOn="everywhere", indent=false
                            ---
                            {
                                correlationId     : vars.correlationId,
                                flowName          : flow.name as String default "unknown",
                                message           : vars.message,
                                tracePoint        : vars.tracePoint,
                                content           : "Error parsing expression. See logs for details.",
                                applicationName   : vars.appName,
                                applicationVersion: vars.appVersion,
                                timestamp         : now(),
                                environment       : vars.environment
                            }]'
                            doc:name="Set Variable"
                        />
                    </mule:on-error-continue>
                </mule:error-handler>
            </mule:try>

            <mule:choice doc:name="Priority/Level">
                <mule:when expression='#[vars.level == "INFO"]' ><mule:logger level="INFO"  message="#[vars.logTrace]"           category="#[vars.category]" /></mule:when>
                <mule:when expression='#[vars.level == "WARN"]' ><mule:logger level="WARN"  message="#[vars.logTrace]"           category="#[vars.category]" /></mule:when>
                <mule:when expression='#[vars.level == "DEBUG"]'><mule:logger level="DEBUG" message="#[vars.logTrace]"           category="#[vars.category]" /></mule:when>
                <mule:when expression='#[vars.level == "ERROR"]'><mule:logger level="ERROR" message="#[vars.logTrace]"           category="#[vars.category]" /></mule:when>
                <mule:when expression='#[vars.level == "TRACE"]'><mule:logger level="TRACE" message="#[vars.logTrace]"           category="#[vars.category]" /></mule:when>
                <mule:otherwise>                                 <mule:logger level="ERROR" message="Unknown log level received" category="#[vars.category]" /></mule:otherwise>
            </mule:choice>
        </body>
    </operation>

    <operation name="logWithoutMasking"
        doc:description="Logs data without applying any masking, capturing the full content for debugging or non-sensitive use cases">

        <parameters>
            <parameter name="message"    use="REQUIRED"    type="string"                                                doc:description="Free text to describe context of logging this log or exception entry" />
            <parameter name="content"    use="OPTIONAL"    type="string" role="CONTENT"                                 doc:description="Can contain attributes/payloads for logs, or exception payload for errors" />
            <parameter name="tracePoint"                   type="tracePoint"            defaultValue="START" />
            <parameter name="level"                        type="logLevel"              defaultValue="INFO" />
            <parameter name="userId"     use="OPTIONAL"    type="string"                                                doc:description="The user of transaction" />
            <parameter name="category"   use="OPTIONAL"    type="string"                defaultValue="${api.category}"  doc:description="Specifies a category name that it adds to the log trace, before the output object. You might use a category to route your log messages, or you might set log levels based on category" />
            <parameter name="correlationId" tab="Advanced" type="string"                defaultValue="#[correlationId]" doc:description="Unique identifier value that is attached to messages that allows reference to a particular transaction or event chain" />
        </parameters>

        <body>
            <mule:try doc:name="Try">
                <mule:set-variable variableName="logTrace"
                    value='#[%dw 2.0
        output application/json indent=true

        fun stringifyAny(inputData: Any, contentType: String) =
                if ((contentType contains "application/xml") or
                    (contentType contains "application/dw"))
                    write(inputData, contentType, {indent: false})
            else if (contentType == "*/*" or (contentType contains "application/json"))
                    inputData
            else
                    write(inputData, contentType)

        var contentType = vars.content.^mediaType default vars.content.^mimeType
        ---
        {
            correlationId: vars.correlationId,
            flowName: flow.name as String default "unknown",
            message: vars.message,
            tracePoint: vars.tracePoint,
            content: if(vars.content != null) stringifyAny(vars.content, contentType) else "",
            applicationName: vars.appName,
            applicationVersion: vars.appVersion,
            timestamp: now(),
            environment: vars.environment

        }]' />
                <mule:error-handler>
                    <mule:on-error-continue
                        enableNotifications="true" logException="true"
                        doc:name="On Error Continue"
                        type="ANY">
                        <mule:set-variable variableName="logTrace"
                            value='#[
                            output application/json skipNullOn="everywhere", indent=false
                            ---
                            {
                                correlationId     : vars.correlationId,
                                flowName          : flow.name as String default "unknown",
                                message           : vars.message,
                                tracePoint        : vars.tracePoint,
                                content           : "Error parsing expression. See logs for details.",
                                applicationName   : vars.appName,
                                applicationVersion: vars.appVersion,
                                timestamp         : now(),
                                environment       : vars.environment
                            }]'
                        />
                    </mule:on-error-continue>
                </mule:error-handler>
            </mule:try>

            <mule:choice doc:name="Priority/Level">
                <mule:when expression='#[vars.level == "INFO"]' ><mule:logger level="INFO"  message="#[vars.logTrace]"           category="#[vars.category]" /></mule:when>
                <mule:when expression='#[vars.level == "WARN"]' ><mule:logger level="WARN"  message="#[vars.logTrace]"           category="#[vars.category]" /></mule:when>
                <mule:when expression='#[vars.level == "DEBUG"]'><mule:logger level="DEBUG" message="#[vars.logTrace]"           category="#[vars.category]" /></mule:when>
                <mule:when expression='#[vars.level == "ERROR"]'><mule:logger level="ERROR" message="#[vars.logTrace]"           category="#[vars.category]" /></mule:when>
                <mule:when expression='#[vars.level == "TRACE"]'><mule:logger level="TRACE" message="#[vars.logTrace]"           category="#[vars.category]" /></mule:when>
                <mule:otherwise>                                 <mule:logger level="ERROR" message="Unknown log level received" category="#[vars.category]" /></mule:otherwise>
            </mule:choice>

        </body>
    </operation>
</module>